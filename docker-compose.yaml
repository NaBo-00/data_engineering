services:
  postgres:
    image: postgres:13
    container_name: postgres
    ports:
      - "5432:5432"
    env_file: 
      - .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
      start_period: 30s
    restart: always
    networks:
      - airflow-net

  redis:
    image: redis:latest
    expose:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 30s
      retries: 5
      start_period: 30s
    restart: always
    networks:
      - airflow-net

  airflow-webserver:
    build:
      context: .
      dockerfile: Dockerfile
    image: extending_airflow:latest
    command: webserver
    ports:
      - "8080:8080"
    env_file: 
      - .env
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    environment:
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/airflow
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/airflow
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/airflow
      AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
      AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW__CORE__FERNET_KEY}
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'true'
      AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.session,airflow.api.auth.backend.basic_auth'
      AIRFLOW__WEBSERVER__SECRET_KEY: ${AIRFLOW__WEBSERVER__SECRET_KEY}
      AIRFLOW__WEBSERVER__WEB_SERVER_WORKER_TIMEOUT: 660
      AIRFLOW__WEBSERVER__WEB_SERVER_MASTER_TIMEOUT: 660
      AIRFLOW__CORE__DAGBAG_IMPORT_TIMEOUT: 600
      AIRFLOW__WEBSERVER__SESSION_BACKEND: 'securecookie'
      AIRFLOW_CONN_SPARK_DEFAULT: 'spark://spark-master:7077'
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./processing:/opt/spark/processing
      - ./visualization/create_visualization.py:/opt/visualization
      - ./data:/data
    user: "${AIRFLOW_UID:-50000}:0"
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully
    networks:
      - airflow-net

  airflow-scheduler:
    build:
      context: .
      dockerfile: Dockerfile
    image: extending_airflow:latest
    command: scheduler
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8793/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    env_file: 
      - .env
    environment:
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/airflow
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/airflow
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/airflow
      AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
      AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW__CORE__FERNET_KEY}
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'true'
      AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.session,airflow.api.auth.backend.basic_auth'
      AIRFLOW__WEBSERVER__SECRET_KEY: ${AIRFLOW__WEBSERVER__SECRET_KEY}
      AIRFLOW__WEBSERVER__WEB_SERVER_WORKER_TIMEOUT: 660
      AIRFLOW__WEBSERVER__WEB_SERVER_MASTER_TIMEOUT: 660
      AIRFLOW__CORE__DAGBAG_IMPORT_TIMEOUT: 600
      AIRFLOW__WEBSERVER__SESSION_BACKEND: 'securecookie'
      AIRFLOW_CONN_SPARK_DEFAULT: 'spark://spark-master:7077'
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./processing:/opt/spark/processing
      - ./visualization/create_visualization.py:/opt/visualization
      - ./data:/data
    user: "${AIRFLOW_UID:-50000}:0"
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully
    networks:
      - airflow-net

  airflow-worker:
    build:
      context: .
      dockerfile: Dockerfile
    image: extending_airflow:latest
    command: celery worker
    healthcheck:
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.providers.celery.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}" || celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    env_file: 
      - .env
    environment:
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/airflow
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/airflow
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/airflow
      AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
      AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW__CORE__FERNET_KEY}
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'true'
      AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.session,airflow.api.auth.backend.basic_auth'
      AIRFLOW__WEBSERVER__SECRET_KEY: ${AIRFLOW__WEBSERVER__SECRET_KEY}
      AIRFLOW__WEBSERVER__WEB_SERVER_WORKER_TIMEOUT: 660
      AIRFLOW__WEBSERVER__WEB_SERVER_MASTER_TIMEOUT: 660
      AIRFLOW__CORE__DAGBAG_IMPORT_TIMEOUT: 600
      AIRFLOW__WEBSERVER__SESSION_BACKEND: 'securecookie'
      AIRFLOW_CONN_SPARK_DEFAULT: 'spark://spark-master:7077'
    restart: always
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./processing:/opt/spark/processing
      - ./visualization/create_visualization.py:/opt/visualization
      - ./data:/data
      - ./driver/postgresql-42.7.3.jar:/opt/spark/jars/postgresql-42.7.3.jar
    user: "${AIRFLOW_UID:-50000}:0"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully
    networks:
      - airflow-net

  airflow-triggerer:
    build:
      context: .
      dockerfile: Dockerfile
    image: extending_airflow:latest
    command: triggerer
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8795/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    env_file: 
      - .env
    environment:
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/airflow
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/airflow
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/airflow
      AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
      AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW__CORE__FERNET_KEY}
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'true'
      AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.session,airflow.api.auth.backend.basic_auth'
      AIRFLOW__WEBSERVER__SECRET_KEY: ${AIRFLOW__WEBSERVER__SECRET_KEY}
      AIRFLOW__WEBSERVER__WEB_SERVER_WORKER_TIMEOUT: 660
      AIRFLOW__WEBSERVER__WEB_SERVER_MASTER_TIMEOUT: 660
      AIRFLOW__CORE__DAGBAG_IMPORT_TIMEOUT: 600
      AIRFLOW__WEBSERVER__SESSION_BACKEND: 'securecookie'
      AIRFLOW_CONN_SPARK_DEFAULT: 'spark://spark-master:7077'
    restart: always
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./processing:/opt/spark/processing
      - ./visualization/create_visualization.py:/opt/visualization
      - ./data:/data
    user: "${AIRFLOW_UID:-50000}:0"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully
    networks:
      - airflow-net

  airflow-init:
    build:
      context: .
      dockerfile: Dockerfile
    image: extending_airflow:latest
    entrypoint: /bin/bash
    command:
      - -c
      - |
        if [[ -z "${AIRFLOW_UID}" ]]; then
          echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
        fi
        one_meg=1048576
        mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
        cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
        disk_available=$$(df / | tail -1 | awk '{print $$4}')
        warning_resources="false"
        if (( mem_available < 4000 )) ; then
          echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
          warning_resources="true"
        fi
        if (( cpus_available < 2 )); then
          echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
          warning_resources="true"
        fi
        if (( disk_available < one_meg * 10 )); then
          echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
          warning_resources="true"
        fi
        if [[ $${warning_resources} == "true" ]]; then
          echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
        fi
        mkdir -p /sources/logs /sources/dags /sources/plugins
        chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins}
        exec /entrypoint airflow version
    env_file: 
      - .env
    environment:
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/airflow
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/airflow
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/airflow
      AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
      AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW__CORE__FERNET_KEY}
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'true'
      AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.session,airflow.api.auth.backend.basic_auth'
      AIRFLOW__WEBSERVER__SECRET_KEY: ${AIRFLOW__WEBSERVER__SECRET_KEY}
      AIRFLOW__WEBSERVER__WEB_SERVER_WORKER_TIMEOUT: 660
      AIRFLOW__WEBSERVER__WEB_SERVER_MASTER_TIMEOUT: 660
      AIRFLOW__CORE__DAGBAG_IMPORT_TIMEOUT: 600
      AIRFLOW__WEBSERVER__SESSION_BACKEND: 'securecookie'
      AIRFLOW_CONN_SPARK_DEFAULT: 'spark://spark-master:7077'
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
    user: "0:0"
    volumes:
      - .:/sources
    networks:
      - airflow-net

  spark-master:
    image: bitnami/spark:latest
    container_name: spark-master
    hostname: spark-master
    ports:
      - "8088:8088" # Web UI port
      - "7077:7077" # Master port
    environment:
      - SPARK_MODE=master
      - SPARK_MASTER_PORT=7077
      - SPARK_MASTER_WEBUI_PORT=8088
    volumes:
      - ./processing:/opt/spark/processing
      - ./data:/data
      - ./spark/spark-defaults.conf:/opt/bitnami/spark/conf/spark-defaults.conf
      - ./driver/postgresql-42.7.3.jar:/opt/bitnami/spark/jars/postgresql-42.7.3.jar
    networks:
      - airflow-net

  spark-worker:
    image: bitnami/spark:latest
    container_name: spark-worker
    hostname: spark-worker
    ports:
      - "8081:8081" # Web UI port
    environment: 
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_WEBUI_PORT=8081
    volumes:
      - ./processing:/opt/spark/processing
      - ./spark/spark-defaults.conf:/opt/bitnami/spark/conf/spark-defaults.conf
      - ./data:/data
      - ./driver/postgresql-42.7.3.jar:/opt/bitnami/spark/jars/postgresql-42.7.3.jar
    depends_on:
      - spark-master
    networks:
      - airflow-net

  superset:
    image: apache/superset:latest
    container_name: superset
    ports:
      - "8089:8088"
    env_file: 
      - .env
    environment:
      - SUPERSET_DATABASE_URI=postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres/taxi_data_processed
      - SQLALCHEMY_DATABASE_URI=postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres/taxi_data_processed
      - ADMIN_USERNAME=${ADMIN_USERNAME}
      - ADMIN_EMAIL=${ADMIN_EMAIL}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD}
    volumes:
    - ./superset/superset_config.py:/app/superset_config.py
    - ./superset/config.py:/app/superset/config.py
    - ./superset/init_superset.sh:/docker-entrypoint-initdb.d/init_superset.sh
    entrypoint: /bin/bash
    command:
    - -c
    - |
      /docker-entrypoint-initdb.d/init_superset.sh
      superset run -h 0.0.0.0 -p 8088 --with-threads --reload --debugger
    networks:
      - airflow-net
    depends_on:
      - postgres

volumes:
  postgres-db-volume:

networks:
  airflow-net:
    driver: bridge

